group 'org.com'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'

def drivers = ["firefox", "chrome", "ie", "safari"]

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    def gebVersion = "0.12.2"
    def testngVersion = "6.9.10"
    def seleniumVersion = "2.53.0"

    compile "org.codehaus.groovy:groovy-all:2.3.11"
    compile "junit:junit:4.12"
    compile "log4j:log4j:1.2.17"
    compile "org.gebish:geb-core:$gebVersion"
    compile "org.testng:testng:$testngVersion"
    compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    compile "org.codehaus.geb:geb-testng:0.7.2"
    compile "org.apache.poi:poi:3.12"
    compile "org.jsoup:jsoup:1.8.3"
    compile "com.relevantcodes:extentreports:2.40.2" /*For Extent Reports*/
    compile "com.google.inject:guice:4.0" /*For TestNG Listeners*/
    compile "com.google.guava:guava:19.0"
    compile "org.apache.httpcomponents:fluent-hc:4.5.2"
    compile "javax.xml.parsers:jaxp-api:1.4.5"
    compile "org.uncommons:reportng:1.1.4"
    compile "org.apache.poi:poi:3.10-FINAL"
    compile "org.apache.poi:poi-ooxml:3.10-FINAL"
}

drivers.each { driver ->
    task "${driver}Test"(type: Test, dependsOn: [classes, testClasses]) {
        doFirst {
            delete "reports", "test-output"
            editTestNGParams()
            testNGXMLCreator.execute()
        }
        outputs.upToDateWhen { false }
        useTestNG {
            convertPropertiesToSystemProperties()
            systemProperty "geb.env", driver;
            reports.html.destination = System.properties['junit.reports.directory']
            useDefaultListeners = true
            suites 'src/test/resources/testng.xml'
        }
    }
}

task(testNGXMLCreator, dependsOn: ['classes'], type: JavaExec) {
    main = 'Specs.Utilities.TestNGXMLCreator'
    classpath = sourceSets.test.runtimeClasspath
}

public void editTestNGParams() {
    FileInputStream file = new FileInputStream("./src/main/resources/project.properties");
    Properties props = new Properties();
    props.load(file);
    file.close();

    FileOutputStream out = new FileOutputStream("./src/main/resources/project.properties");
    props.setProperty("browser", System.properties['browser']);
    props.setProperty("geb.build.baseUrl", System.properties['geb.build.baseUrl']);
    props.setProperty("parallel", System.properties['parallel']);
    props.setProperty("threadCount", System.properties['threadCount']);
    props.setProperty("package.name", System.properties['package.name']);
    props.setProperty("group.name", System.properties['group.name']);
    props.setProperty("class.name", System.properties['class.name']);
    props.setProperty("method.name", System.properties['method.name']);
    props.store(out, null);
    out.close();
}

/* This Function reads the project.properties file and puts each K,V pair into System Properties.*/
public void convertPropertiesToSystemProperties() {
    String rootDir = new File(".").getCanonicalPath() /*Absolute Path*/
    String projectPropertiesPath = rootDir + "/src/main/resources/project.properties".replace('/', File.separator)
    Properties properties = new Properties()
    properties.load(new FileInputStream(projectPropertiesPath))
    properties.each { key, value ->
        if (System.getProperty(key) == null) {
            System.setProperty(key, value);
        }
    }
}

task testCasesDetails(type: Test, dependsOn: [classes, testClasses]) {
    outputs.upToDateWhen { false }
    useTestNG {
        suites 'src/test/resources/xmls/test-case-details.xml'
    }
}

task reRunTest(type: Test, dependsOn: [classes, testClasses]) {
    doFirst{
        copyTask.execute()
    }
    /*outputs.upToDateWhen { false }
    useTestNG {
        convertPropertiesToSystemProperties()
        reports.html.destination = System.properties['junit.reports.directory']
        println(System.properties['geb.build.baseUrl'])
        systemProperty "geb.env", System.properties['geb.build.baseUrl'];
        useDefaultListeners = true
        suites 'src/test/resources/xmls/testng-failed.xml'
    }*/
}

task (copyTask, type: Copy) {
    if(new File('src/test/resources/xmls/testng-failed.xml').exists()){
        delete 'src/test/resources/xmls/testng-failed.xml'
    }
    if(new File('reports/Junit-Reports/testng-failed.xml').exists()){
        from 'reports/Junit-Reports/testng-failed.xml'
        into 'src/test/resources/xmls/'
        delete "reports"
    }
}
