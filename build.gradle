group 'org.com'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'

repositories {
    mavenCentral()
    jcenter()
}

def drivers = ["firefox","chrome","ie","safari"]

dependencies {

    def gebVersion = "0.12.2"
    def testngVersion = "6.9.10"
    def seleniumVersion = "2.45.0"

    compile "org.codehaus.groovy:groovy-all:2.3.11"
    compile "log4j:log4j:1.2.17"
    compile "org.gebish:geb-core:$gebVersion"
    compile "org.testng:testng:$testngVersion"
    compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    compile "org.codehaus.geb:geb-testng:0.7.2"
    compile "org.apache.poi:poi:3.12"
    compile "junit:junit:4.12"
    compile "org.jsoup:jsoup:1.8.3"
    compile "com.relevantcodes:extentreports:2.40.2" /*For Extent Reports*/
    compile "com.google.inject:guice:4.0" /*For TestNG Listeners*/
    compile "com.google.guava:guava:19.0"
}

drivers.each { driver ->
    task "${driver}Test"(type: Test, dependsOn: [classes,testClasses]) {
        doFirst{
            delete "reports"
        }
        useTestNG {
                convertPropertiesToSystemProperties()
                changeTestngThreadCountParam()
                /*If a task is executed without fail,the task will get marked as 'UP-TO-DATE' on subsequent runs and skipped.To avoid that use this parameter as false*/
                outputs.upToDateWhen { false }
                systemProperty "geb.env", driver;
                //reports.html.enabled = false; /* Enable this when you do not want default JUNIT Reports*/
                reports.html.destination = System.properties['junit.reports.directory']
                suites 'src/test/resources/testng.xml'
        }
    }
}

public void changeTestngThreadCountParam(){
    def file = new File('src/test/resources/testng.xml')
    def xml = file.text
    file.text = xml.replace('$threadCount',System.getProperty('threadCount'))
}

/* This Function reads the project.properties file and puts each K,V pair into System Properties.*/
public void convertPropertiesToSystemProperties() {
    String rootDir = new File(".").getCanonicalPath() /*Absolute Path*/
    String projectPropertiesPath = rootDir + "/src/main/resources/project.properties".replace('/', File.separator)
    Properties properties = new Properties()
    properties.load(new FileInputStream(projectPropertiesPath))
    properties.each { key, value ->
        if (System.getProperty(key) == null) {
            System.setProperty(key, value);
        }
    }
}

